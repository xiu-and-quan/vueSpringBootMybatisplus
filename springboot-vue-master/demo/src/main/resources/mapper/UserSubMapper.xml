<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD com.example.Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.UserSubMapper">
    <insert id="myInsert" parameterType="com.example.demo.entity.UserSub">
        insert into user_sub(user_name, user_native_place, user_tel)
        values (#{userName, jdbcType=VARCHAR},
                #{nativePlace, jdbcType=VARCHAR},
                #{tel, jdbcType=VARCHAR});
    </insert>

<!--    手写批量插入-->
<!--    foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。
        foreach元素的属性主要有 item，index，collection，open，separator，close。
        item集合中每一个元素进行迭代时的别名，
        index表示在迭代过程中，每次迭代到的位置，
        open该语句以什么开始，
        separator在每次进行迭代之间以什么符号作为分隔 符，
        close以什么结束，
        在使用foreach的时候最关键的也是最容易出错的就是collection属性，
        该属性是必须指定的，但是在不同情况 下，该属性的值是不一样的，
        主要有一下3种情况：
        1.     如果传入的是单参数且参数类型是一个List的时候，collection属性值为list
        2.     如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array
        3.     如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了-->
<!--    <insert id="bathInsert" parameterType="com.example.demo.entity.UserSub">-->
<!--        insert into user_sub(user_name, user_native_place, user_tel)-->
<!--        values-->
<!--            <foreach collection="List" item="item" index="index" separator=",">-->
<!--                #{userName, jdbcType=VARCHAR},-->
<!--                #{nativePlace, jdbcType=VARCHAR},-->
<!--                #{tel, jdbcType=VARCHAR}-->
<!--            </foreach>-->
<!--    </insert>-->

</mapper>